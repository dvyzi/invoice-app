// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique @db.VarChar(320)
  password  String
  name      String    @db.VarChar(50)
  lastName  String    @db.VarChar(50)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  invoices  Invoice[]
}

model Invoice {
  id              String   @id @default(uuid())
  userId          String
  address         String   @db.VarChar(255)
  city            String   @db.VarChar(100)
  postalCode      String   @db.VarChar(20)
  country         String   @db.VarChar(100)
  clientName      String   @db.VarChar(100)
  clientEmail     String   @db.VarChar(320)
  clientAddress   String   @db.VarChar(255)
  clientCity      String   @db.VarChar(100)
  clientPostalCode String  @db.VarChar(20)
  clientCountry   String   @db.VarChar(100)
  invoiceDate     DateTime
  paymentTerms    Int      // Nombre de jours (1, 7, 14, 30)
  dueDate         DateTime
  description     String   @db.VarChar(255)
  status          InvoiceStatus @default(DRAFT)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
  items           InvoiceItem[]
  total           Float?   // Montant total de la facture
  accessPasswordHash String? // Haché avec bcrypt
  signature       String?  @db.LongText // Signature en base64
  isSigned        Boolean  @default(false) // Indique si la facture a été signée
  signatureDate   DateTime? // Date de signature
}

model InvoiceItem {
  id        String   @id @default(uuid())
  invoiceId String
  name      String   @db.VarChar(100)
  quantity  Int
  price     Float
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
}
